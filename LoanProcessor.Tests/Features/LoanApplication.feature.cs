// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LoanProcessor.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LoanApplication")]
    public partial class LoanApplicationFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "LoanApplication.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "LoanApplication", "Loan application should be granted only when the\r\nloan amount, down payment and c" +
                    "redit status are within acceptable limits", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Loan applications up to and including 1000 are always approved")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("500", "10", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "88", "false", null)]
        public async System.Threading.Tasks.Task LoanApplicationsUpToAndIncluding1000AreAlwaysApproved(string loanAmount, string downPayment, string creditStatusOk, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("loanAmount", loanAmount);
            argumentsOfScenario.Add("downPayment", downPayment);
            argumentsOfScenario.Add("creditStatusOk", creditStatusOk);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Loan applications up to and including 1000 are always approved", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "LoanAmount",
                            "DownPayment",
                            "CreditStatusOk"});
                table1.AddRow(new string[] {
                            string.Format("{0}", loanAmount),
                            string.Format("{0}", downPayment),
                            string.Format("{0}", creditStatusOk)});
#line 8
  await testRunner.GivenAsync("John is applying for a loan", ((string)(null)), table1, "Given ");
#line hidden
#line 11
  await testRunner.WhenAsync("the loan application is submitted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
  await testRunner.ThenAsync("the loan application will be approved", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Loan applications over 1000000 are always denied")]
        [NUnit.Framework.TestCaseAttribute("1000001", "100", "true", null)]
        [NUnit.Framework.TestCaseAttribute("9999999", "1000000", "false", null)]
        public async System.Threading.Tasks.Task LoanApplicationsOver1000000AreAlwaysDenied(string loanAmount, string downPayment, string creditStatusOk, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("loanAmount", loanAmount);
            argumentsOfScenario.Add("downPayment", downPayment);
            argumentsOfScenario.Add("creditStatusOk", creditStatusOk);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Loan applications over 1000000 are always denied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "LoanAmount",
                            "DownPayment",
                            "CreditStatusOk"});
                table2.AddRow(new string[] {
                            string.Format("{0}", loanAmount),
                            string.Format("{0}", downPayment),
                            string.Format("{0}", creditStatusOk)});
#line 22
  await testRunner.GivenAsync("John is applying for a loan", ((string)(null)), table2, "Given ");
#line hidden
#line 25
  await testRunner.WhenAsync("the loan application is submitted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
  await testRunner.ThenAsync("the loan application will be denied", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Down payment should be at least 10%")]
        [NUnit.Framework.TestCaseAttribute("1001", "100", "true", "denied", null)]
        [NUnit.Framework.TestCaseAttribute("1001", "101", "true", "approved", null)]
        [NUnit.Framework.TestCaseAttribute("1000000", "99999", "true", "denied", null)]
        [NUnit.Framework.TestCaseAttribute("1000000", "100000", "true", "approved", null)]
        public async System.Threading.Tasks.Task DownPaymentShouldBeAtLeast10(string loanAmount, string downPayment, string creditStatusOk, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("loanAmount", loanAmount);
            argumentsOfScenario.Add("downPayment", downPayment);
            argumentsOfScenario.Add("creditStatusOk", creditStatusOk);
            argumentsOfScenario.Add("result", result);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Down payment should be at least 10%", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                            "LoanAmount",
                            "DownPayment",
                            "CreditStatusOk"});
                table3.AddRow(new string[] {
                            string.Format("{0}", loanAmount),
                            string.Format("{0}", downPayment),
                            string.Format("{0}", creditStatusOk)});
#line 35
  await testRunner.GivenAsync("John is applying for a loan", ((string)(null)), table3, "Given ");
#line hidden
#line 38
  await testRunner.WhenAsync("the loan application is submitted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
  await testRunner.ThenAsync(string.Format("the loan application will be {0}", result), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Credit status should be OK")]
        [NUnit.Framework.TestCaseAttribute("1001", "101", "false", "denied", null)]
        [NUnit.Framework.TestCaseAttribute("1001", "101", "true", "approved", null)]
        [NUnit.Framework.TestCaseAttribute("1000000", "100000", "false", "denied", null)]
        [NUnit.Framework.TestCaseAttribute("1000000", "100000", "true", "approved", null)]
        public async System.Threading.Tasks.Task CreditStatusShouldBeOK(string loanAmount, string downPayment, string creditStatusOk, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("loanAmount", loanAmount);
            argumentsOfScenario.Add("downPayment", downPayment);
            argumentsOfScenario.Add("creditStatusOk", creditStatusOk);
            argumentsOfScenario.Add("result", result);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Credit status should be OK", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                            "LoanAmount",
                            "DownPayment",
                            "CreditStatusOk"});
                table4.AddRow(new string[] {
                            string.Format("{0}", loanAmount),
                            string.Format("{0}", downPayment),
                            string.Format("{0}", creditStatusOk)});
#line 48
  await testRunner.GivenAsync("John is applying for a loan", ((string)(null)), table4, "Given ");
#line hidden
#line 51
  await testRunner.WhenAsync("the loan application is submitted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
  await testRunner.ThenAsync(string.Format("the loan application will be {0}", result), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
